// impot React
import React, { useEffect, useState } from 'react';

// import all React Native components
import { StyleSheet,
    Text,
    View,
    TouchableOpacity,
    Image,
    ImageBackground,
    Dimensions,
    TextInput,
    KeyboardAvoidingView,
    FlatList,
    StatusBar,
    SafeAreaView,
} from 'react-native';

// import Firestore docs
import {
    collection,
    query,
    where,
    doc,
    orderBy,
    setDoc,
    getFirestore,
    getDoc,
    getDocs,
    serverTimestamp,
} from 'firebase/firestore';

// import all Firebase Storage components
import {
    getStorage,
    ref,
    uploadString,
    uploadBytes,
    uploadBytesResumable,
    getDownloadURL,
} from 'firebase/storage';

// import Firebase authentication
import { auth } from '../firebaseConfig';

// import screen scrolling
import { ScrollView } from 'react-native-gesture-handler';

// import custom buttons
import FullButton from '../components/FullButton';
import IonButton from '../components/IonButton';


// get Firestore Database and Storage
const db = getFirestore();
const storage = getStorage();

// get screen dimensions
const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// // test
// const TestComments = [
//     {
//         id: '1',
//         text: 'Hello I am dog',
//     },
//     {
//         id: '2',
//         text: 'Banana Saaaaam is my hero!',
//     },
//     {
//         id: '3',
//         text: 'Greetings, brother ðŸ––',
//     },
// ];

// comments
const Item = ({ title, author, authorImage }) => {
    return (
        <View style={styles.commentAuthorContainer}>
            <Image
                source={{ uri: authorImage }}
                style={styles.authorProfilePhoto}
            />
            <View>
                <Text style={styles.commentAuthorNameText}>{author}</Text>
                <Text style={styles.commentText}>{title}</Text>
            </View>
        </View>
    )
};


const ImageScreen = ({route, navigation}) => {

    // render FlatList of comments
    const renderItem = ({ item }) => (
        <Item title={item.text}
            author={item.authorName}
            authorImage={item.authorImageSource}
        />
    );

    // click the like button
    const likeImage = () => {
        console.log('You liked the image');
    }

    // click the dislike button
    const dislikeImage = () => {
        console.log('You disliked the image');
    }

    // click the flag button
    const reportImage = () => {
        console.log('You reported the image');
        getCommentData();
    }

    // array for FlatList of images
    const [getDownloadedComments, setDownloadedComments] = useState([]);

    // post comment
    const postComment = async(comment) => {
        //console.log('You posted a comment');
        console.log('You commented: ' + comment);
        setComment('');

        // Create a new document ref with an autogenerated id
        const newCommentRef = doc(collection(
            db, 'uniqueImageNames',
            imageId, 'comments',
        ));

        // Add a new document in collection 'cities'
        await setDoc(newCommentRef, {
            commentText: comment,
            commentAuthorID: auth.currentUser.uid,
            commentAuthorUsername: auth.currentUser.displayName,
            timestamp: serverTimestamp(),
        });
        
    }

    // clear text from text field when posting comment
    const clearText = (val) => {
        setComment('');
    }
    
    // URL of image to load
    const {imageSourceToLoad, imageId} = route.params;
    //console.log('SOURCE: ' + imageSourceToLoad);
    //console.log('ID: ' + imageId);

    // comment contents
    const [getComment, setComment] = useState('');

    // image metadata
    const [imageAuthorUsername, setImageAuthorUserName] = useState('Default');
    const [imageTitle, setImageTitle] = useState('Default');
    const [authorImageUrl, setAuthorImageUrl] = useState('Default');
    const [authorUid, setAuthorUid] = useState('Default');

    // get data for the image
    const getImageData = async (imageId) => {

        const docRef = doc(db, 'uniqueImageNames', imageId);
        const docSnap = await getDoc(docRef);

        console.log('ImageId: ' + imageId);

        if (docSnap.exists()) {
            //console.log('Document data:', docSnap.data());
            setImageAuthorUserName(String(docSnap.data().imageAuthorUsername.toString()));
            setImageTitle(String(docSnap.data().imageTitle.toString()));

            const tempAuthorUid =  docSnap.data().imageAuthorUID.toString();
            //For author profile photo
            const pathReference = ref(storage, 'userProfileImages/' + tempAuthorUid);

            let temp = await getDownloadURL(pathReference);
            //console.log('Temp: ' + temp);
            setAuthorImageUrl(temp);
            
        } else {
            // doc.data() will be undefined in this case
            console.log('No such document!');
        }
    }

    // get data from all the comments
    const getCommentData = async() => {

        // Create a new document with an autogenerated id
        const newCommentsRef = collection(db, 'uniqueImageNames', imageId, 'comments');
        
        // Create a query against the collection.
        //const q = query(newCommentRef, orderBy('timestamp'));
        //const newCommentsRef = collection(db, 'uniqueImageNames');
        const querySnapshot = await getDocs(newCommentsRef);
        console.log('Snapshot get!');
        
        if (querySnapshot != null) {
            querySnapshot.forEach(async(doc) => {
                
                const commentAuthorID = doc.data().commentAuthorID;
                const pathReference = ref(storage, 'userProfileImages/' + commentAuthorID);

                let commentAuthorImageUrl = await getDownloadURL(pathReference);
                console.log('Temp: ' + commentAuthorImageUrl);
                
                let docData = doc.data();
                let aComment = {
                    id: doc.id,
                    text: docData.commentText,
                    authorName: docData.commentAuthorUsername,
                    authorId: commentAuthorID,
                    authorImageSource: commentAuthorImageUrl,
                }
                //console.log(doc.id)
                //console.log(aComment);
                setDownloadedComments(getDownloadedComments => [...getDownloadedComments, aComment]);
            });
        } else {
            console.log('No such query snapshot!');
        }
    }

    // initial comment load
    const loadComments = async () => {
        await getCommentData();
        console.log('Comments: ' + getDownloadedComments);
    }
  
    useEffect(() => {
        //console.log('THIS BETTER WORK.:' + imageId)
        getImageData(imageId);
    }, []);

    useEffect(() => {
        loadComments();
    }, []);

  //console.log('Got ID:' + imageId);

  
  return (
    <KeyboardAvoidingView behavior='padding'>
        <ScrollView>
            <View style={styles.screenContainer}>
                <TouchableOpacity onPress={() => console.log('Touched photo')}>
                    <ImageBackground
                        source={{ uri: imageSourceToLoad }}
                        style={styles.imageStyle}
                    >
                        <View style={styles.icon}>
                            <IonButton
                                name='heart'
                                onPress={() => likeImage()}
                                color='rgba(102,128,130,1)'
                                size={24}
                                style={styles.buttonStyle}
                            />
                        </View>
                    </ImageBackground>
                </TouchableOpacity>
            </View>

            <View style={styles.imageFooterContainer}>
                <Image
                    source={{ uri: authorImageUrl }}
                    style={styles.authorProfilePhoto}
                />
                <View>
                    <Text style={styles.imageNameText}>{imageTitle}</Text>
                    <Text style={styles.authorNameText}>by {imageAuthorUsername}</Text>
                </View>

                
                <View style={styles.report}>
                    <IonButton
                        name='flag'
                        onPress={() => reportImage()}
                        size={24}
                        color='red'
                    />
                </View>
            </View>

            <View style={styles.commentsContainer}>
                <View style={{marginTop: 12, marginBottom: 12,}}>
                    <Text style={styles.commentsCount}>0 Comments</Text>
                </View>

                <SafeAreaView style={{flex: 1,}}>
                    <FlatList
                        data={getDownloadedComments}
                        renderItem={renderItem}
                        keyExtractor={item => item.id}
                    />
                </SafeAreaView>

                <FullButton
                    onPress={() => {}}
                    text={'Load more comments'}
                    backgroundColor={'white'}
                    textColor={'#60B1B6'}
                    borderColor={'#60B1B6'}
                />

                <View style={{marginTop: 16}}>
                    <FullButton
                        onPress={() => {}}
                        text={'Add a comment'}
                        backgroundColor={'#60B1B6'}
                        textColor={'white'}
                        borderColor={'transparent'}
                    />
                </View>

                <View style={styles.imageFooterContainer}>
                    <View
                        behavior='height'
                        style={styles.inputContainer}
                    >
                        <TextInput
                            style={styles.inputComment}
                            multiline={true}
                            value={getComment}
                            onChangeText={text => setComment(text)}
                            placeholder='Add a comment...'
                            onSubmitEditing={() => setComment('')}
                        />
                    </View>

                    <IonButton
                        name='send'
                        onPress={() => {
                            postComment(getComment);
                            clearText(getComment);
                        }}
                        size={24}
                        color='cyan'
                    />
                </View>
            </View>
        </ScrollView>
    </KeyboardAvoidingView>
  );
};

export default ImageScreen;


const styles = StyleSheet.create({

    // entire screen
    screenContainer: {
        flex: 1,
        borderTopWidth: 0.5,
        borderBottomWidth: 0.5,
        borderTopColor: 'gray',
        borderBottomColor: 'gray',
        // marginTop: StatusBar.currentHeight || 0,
    },

    // image
    imageStyle: {
        width: screenWidth,
        height: screenWidth,
    },

    // icon backgrounds on the image
    icon: {
        position: 'absolute',
        bottom: 5,
        left: 5,
        backgroundColor: 'white',
        borderRadius: 50,
    },

    // image footer
    imageFooterContainer: {
        flexDirection: 'row',
        alignContent: 'center',
        alignItems: 'center',
        borderTopWidth: 0,
        borderBottomWidth: 0.5,
        borderBottomColor: 'gray',
    },

    // profile photo of the user who drew the image
    authorProfilePhoto: {
        marginLeft: 4,
        marginVertical: 4,
        borderRadius: 30,
        width: 36,
        aspectRatio: 1,
        borderWidth: 1,
        borderColor: 'black',
    },

    // name of the image
    imageNameText: {
        marginLeft: 8,
        fontSize: 14,
        fontWeight: 'bold',
    },

    // name of the user who drew the image
    authorNameText: {
        marginLeft: 8,
        fontSize: 12,
    },

    // comments section
    commentsContainer: {
        flex: 1,
        marginHorizontal: 24,  
    },

    // title for number of comments
    commentsCount: {
        fontSize: 16,
    },

    // FullButton style
    buttonStyle: {
        padding: 4,
    },

    // report button
    report: {
        marginLeft: 'auto',
    },

    // text input and send button
    inputContainer: {
        marginTop: 20,
        width: screenWidth * 0.8,
        backgroundColor: 'white',
        borderRadius: 30,
        borderWidth: 2,
        flexWrap: 'wrap',
        marginBottom: 20,
        marginRight: 8,
    },

    // input text for submitting a comment
    inputComment: {
        padding: 10,
        width: '100%',
    },

    // name of user who left the comment
    commentAuthorNameText: {
        fontSize: 12,
        fontWeight: 'bold',
        marginLeft: 8,
    },

    // style of text inside of each comment
    commentText: {
        fontSize: 12,
        marginLeft: 8,
    },
});