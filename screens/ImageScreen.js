import { StyleSheet, Text, View, TouchableOpacity, Image, Dimensions, TextInput, KeyboardAvoidingView, FlatList, StatusBar, SafeAreaView } from 'react-native';
import React, { useEffect, useState } from 'react';
import { useNavigation } from '@react-navigation/native';
import IonButton from '../components/IonButton';

// import Firestore docs
import {
    collection,
    query,
    where,
    doc,
    orderBy,
    setDoc,
    getFirestore,
    getDoc,
    getDocs,
    serverTimestamp,
} from 'firebase/firestore';

import {
    getStorage,
    ref,
    uploadString,
    uploadBytes,
    uploadBytesResumable,
    getDownloadURL,
} from 'firebase/storage';
import { auth } from '../firebaseConfig';
import { ScrollView } from 'react-native-gesture-handler';
import { async } from '@firebase/util';

const db = getFirestore();

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');


const TestComments = [
    {
        id: "1",
        text: "Hello I am dog",
    },
    {
        id: "2",
        text: "Banana Saaaaam is my hero!",
    },
    {
        id: "3",
        text: "Greetings, brother ðŸ––",
    },
];


const Item = ({ title, author, authorImage }) => {
    
    
    
    return (   
        <View style={styles.item}>
            <Image
                source={{ uri: authorImage }} style={styles.authorProfilePhoto}
            />
            <Text style={styles.title}>{author}</Text>
            <Text style={styles.title}>{title}</Text>
        </View>
)};




const ImageScreen = ({route, navigation}) => {

    const renderItem = ({ item }) => (
        <Item title={item.text} author={item.authorName} authorImage={item.authorImageSource} />
    );

    const likeImage = () => {
        console.log("You liked the image");
    }

    const dislikeImage = () => {
        console.log("You disliked the image");
    }

    const reportImage = () => {
        console.log("You reported the image");
        getCommentData();
    }


    // array for FlatList of images
    const [getDownloadedComments, setDownloadedComments] = useState([]);

    const postComment = async(comment) => {
        //console.log("You posted a comment");
        console.log("You commented: " + comment);
        setComment("");

        // Create a new document ref with an autogenerated id
        const newCommentRef = doc(collection(db, "uniqueImageNames", imageId, "comments"));

        // Add a new document in collection "cities"
        await setDoc(newCommentRef, {
            commentText: comment,
            commentAuthorID: auth.currentUser.uid,
            commentAuthorUsername: auth.currentUser.displayName,
            timestamp: serverTimestamp(),
        });
        
    }

    const clearText = (val) => {
        setComment("");
    }
    
    //Url of image to load
    const {imageSourceToLoad, imageId} = route.params;
    //console.log("SOURCE: " + imageSourceToLoad);
    //console.log("ID: " + imageId);

    //Set up storage
    const storage = getStorage();

    //User comment
    const [getComment, setComment] = useState('');
    

    

    const [imageAuthorUsername, setImageAuthorUserName] = useState("Default");
    const [imageTitle, setImageTitle] = useState("Default");
    const [authorImageUrl, setAuthorImageUrl] = useState("Default");
    const [authorUid, setAuthorUid] = useState("Default");

    const getCommentData = async () => {
        // Create a new document with an autogenerated id
        const newCommentsRef = collection(db, "uniqueImageNames", imageId, "comments");
        // Create a query against the collection.
        //const q = query(newCommentRef, orderBy("timestamp"));
        //const newCommentsRef = collection(db, "uniqueImageNames");
        const querySnapshot = await getDocs(newCommentsRef);
        console.log("HAPPEN: ");
        
        if (querySnapshot != null) {
            querySnapshot.forEach(async (doc) => {
                

                const commentAuthorID = doc.data().commentAuthorID;
                const pathReference = ref(storage, 'userProfileImages/' + commentAuthorID);

                let commentAuthorImageUrl = await getDownloadURL(pathReference);
                console.log("Temp: " + commentAuthorImageUrl);
                
                let aComment = {
                    id: doc.id,
                    text: doc.data().commentText,
                    authorName: doc.data().commentAuthorUsername,
                    authorId: commentAuthorID,
                    authorImageSource: commentAuthorImageUrl,
                }
                //console.log(doc.id)
                //console.log(aComment);
                setDownloadedComments(getDownloadedComments => [...getDownloadedComments, aComment]);
            });
        } else {
            console.log("No such query snapshot!");
        }
        
    }


    const getImageData = async (imageId) => {

        const docRef = doc(db, "uniqueImageNames", imageId);
        const docSnap = await getDoc(docRef);

        console.log("WOWOWOWImageId:" + imageId);

        if (docSnap.exists()) {
            //console.log("Document data:", docSnap.data());
            setImageAuthorUserName(String(docSnap.data().imageAuthorUsername.toString()));
            setImageTitle(String(docSnap.data().imageTitle.toString()));

            const tempAuthorUid =  docSnap.data().imageAuthorUID.toString();
            //For author profile photo
            const pathReference = ref(storage, 'userProfileImages/' + tempAuthorUid);

            let temp = await getDownloadURL(pathReference);
            //console.log("Temp: " + temp);
            setAuthorImageUrl(temp);
            
        } else {
            // doc.data() will be undefined in this case
            console.log("No such document!");
        }
        
    }
  
    useEffect(() => {
        console.log("THIS BETTER WORK.:" + imageId)
        getImageData(imageId);
    }, []);

    useEffect(() => {
        loadComments();
    }, []);

  
    const loadComments = async () => {
        await getCommentData();
        console.log(getDownloadedComments);
    }
  

  //console.log("Got ID:" + imageId);
  
  return (
      <KeyboardAvoidingView behavior="padding">
          <ScrollView>
        <View style={styles.imageHeaderContainer}>
            <Image
                source={{ uri: authorImageUrl }} style={styles.authorProfilePhoto}
            />
            <View>
                  <Text style={styles.imageNameText}>{imageTitle}</Text>
                  <Text style={styles.authorNameText}>by {imageAuthorUsername}</Text>
            </View>
            
        </View>
        
        <View style={styles.imageContainer}>
            <TouchableOpacity onPress={() => console.log("Touched photo")}>
                <Image
                    source={{ uri: imageSourceToLoad }} style={styles.image}
                />
            </TouchableOpacity>
        </View>

        <View style={styles.imageFooterContainer}>
              <View style={styles.buttonContainer}>
                <IonButton name="heart" onPress={() => likeImage()} color="gray" style={styles.buttonContainer} />
              </View>
              <View style={styles.buttonContainer}>
                  <IonButton name="thumbs-down" onPress={() => dislikeImage()} color="gray" />
              </View>
              <View style={styles.reportButtonContainer}>
                  <IonButton name="flag" onPress={() => reportImage()} color="red" />
              </View>
        </View>

        
              <View style={styles.imageFooterContainer}>
                  <View behavior="height" style={styles.inputContainer}>
                      <TextInput
                        ref={input => {this.textInput = input}}
                        style={styles.inputText}
                        multiline={true}
                        value = {getComment}
                        onChangeText={text => setComment(text)}
                        placeholder="Add a comment..."
                        onSubmitEditing={() => setComment("")}
                      />
                  </View>
                  <IonButton name="send" onPress={() => {postComment(getComment); clearText(getComment)}} color="cyan" />
        </View>

        <Text>Comments</Text>
             
                  <FlatList
                      data={getDownloadedComments}
                      renderItem={renderItem}
                      keyExtractor={item => item.id}
                  />
              
          
          
          </ScrollView>
      </KeyboardAvoidingView>
  );
};

export default ImageScreen;

const styles = StyleSheet.create({
    imageContainer: {
        borderTopWidth: 0.5,
        borderBottomWidth: 0.5,
        borderTopColor: 'gray',
        borderBottomColor: "gray",
    },
    image: {

        width:screenWidth,
        height:screenWidth+2,
    },
    imageHeaderContainer: {
        flexDirection: 'row',
        alignContent: 'center',
        alignItems: 'center',
    },
    authorProfilePhoto: {
        marginLeft: 4,
        marginVertical: 4,
        borderRadius: 30,
        width: 36,
        height: 36,
        borderWidth: 1,
        borderColor: 'black',
    },
    authorNameText: {
        marginLeft: 8,
        fontSize: 12,
    },
    imageNameText: {
        marginLeft: 8,
        fontSize: 14,
        fontWeight: 'bold',
    },
    imageFooterContainer: {
        flexDirection: 'row',
        alignContent: 'center',
        alignItems: 'center',
        flexGrow: 1,
    },
    buttonContainer: {
        padding: 4,
    },
    reportButtonContainer: {
        padding: 4,
        marginLeft: "auto"
    },
    inputText: {
        
        padding: 10,
        width: '100%',
    },
    inputContainer: {
        marginTop: 20,
        maxWidth: screenWidth * 0.9,
        width: screenWidth * 0.9,
        backgroundColor: 'white',
        borderRadius: 30,
        borderWidth: 2,
        flexWrap: "wrap",
        marginBottom: 20,
        marginRight: 8,
    }, 
    container: {
        flex: 1,
        marginTop: StatusBar.currentHeight || 0,
    },
    item: {
        backgroundColor: '#f9c2ff',
        padding: 20,
        marginVertical: 8,
        marginHorizontal: 16,
    },
    title: {
        fontSize: 32,
    },
    

});
